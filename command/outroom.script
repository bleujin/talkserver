new function(){
	var toString = function(obj) {
	    var str = '';
	    for (var p in obj) {
	        if (obj.hasOwnProperty(p)) {
	            str += p + '::' + obj[p] + '\n';
	        }
	    }
	    return str;
	} ;
	

	this.create = function(source, cparam){
		var roomId = new net.ion.framework.util.ObjectId().toString() ;
		session.tran(function(wsession){
			var members = wsession.pathBy("/openrooms/" + roomId).child("members") ;
			members.child(client.userId()) ;
			members.child(cparam.remain(0)) ;
		}) ;
		client.data("roomId", roomId) ;
	}, 
	
	this.rooms = function(source, cparam){
		// ex) list rooms, list friends, 
		var children = session.ghostBy("/openrooms").children().toList() ;
		var text = '' ;
		if (children.size() == 0) {
			text = 'no opened rooms' ; 
		} else {
			var rooms = children.iterator() ;
			text = '<ul>' ;
			while(rooms.hasNext()){
				var room = rooms.next().ref('room') ;
				var onClickMsg = "webClient.chat(\"/join " + room.property('roomId').asString() + "\")" ;
				text += "<li><a href='#' onclick='" + onClickMsg + "'>" + room.property('roomId').asString() + "</a> : " + room.property('title').asString() + "</li>" ;
			}
			text += '</ul>' ;
		}
			
		source.sendMessage(
			rb.makeCommandBuilder("/commands/rooms")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", text).build().talkMessage()) ;
	}, 
	
	this.whisper = function(source, cparam){
		var targetId = cparam.reamin(0) ;
		
	}, 
	
	this.whoami = function(source, cparam){
		var user = session.ghostBy("/users/" + source.id()) ;
		source.sendMessage(rb.makeCommandBuilder("/commands/whoami")
			.inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", "id:" + source.id() + ", nick:" + user.property("nickname").asString()).build().talkMessage()) ;
	}, 
	
	this.time = function(source, cparam){
		source.sendMessage(
			rb.makeCommandBuilder("/commands/time")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", new java.util.Date().toString()).build().talkMessage()) ;
	}, 
	
	this.join = function(source, cparam){
		var roomId = cparam.remain(0) ;

		session.tranSync(function(wsession){
			wsession.pathBy("/openrooms/" + roomId).refTo("room", "/rooms/" + roomId).property("roomId", roomId) ;
			if (wsession.exists("/rooms/" + roomId)) wsession.pathBy("/rooms/" + roomId).property("roomId", roomId).property("title", "not defined").child('members').child(source.id()) ;
			else wsession.pathBy("/rooms/" + roomId + "/members/" + source.id()) ;
		}) ;

		source.sendMessage(rb.makeCommandBuilder("/commands/join")
			.inner("result")
				.property("clientScript", "client.room().join('" + roomId + "');")
				.build().talkMessage()) ;				

		var unreadMsg = session.pathBy("/rooms/" + roomId + "/messages").children().ascending('messageId').offset(100).iterator() ;
		while(unreadMsg.hasNext()){
			var next = unreadMsg.next() ; 
			source.sendMessage(rb.makeCommandBuilder("/commands/join")
			  .inner("result")
				.property(next, "message, sender.userId as sender, sender.nickname as senderNickname, requestId, clientScript, event, messageId, time")
				.property("roomId", roomId)
				.build().talkMessage()) ;			
		}
	}, 
	
	this.bot = function(source, cparam){
		var botId = cparam.remain(0) ;
		if (!session.exists("/bots/" + botId)){
			source.sendMessage(
			rb.makeCommandBuilder("/commands/bot")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", botId + ' not exists' ).build().talkMessage()) ;
			return ;
		} 
		
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + cparam.asString("roomId") + "/members/" + botId) ;
		}) ;
		
		source.sendMessage(
			rb.makeCommandBuilder("/commands/bot")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", botId + ' invited' ).build().talkMessage()) ;
		
	}, 
	
	this.members = function(source, cparam){
		var result = [] ;
		var children = session.pathBy("/rooms/" + cparam.asString("roomId") + "/members").children().iterator() ;
		while(children.hasNext()){
			result.push(children.next().fqn().name()) ;
		}
		
		source.sendMessage(
			rb.makeCommandBuilder("/commands/members")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", result.join(', ')).build().talkMessage()) ;
	}, 
	
	this.ban = function(source, cparam){
		var roomId = cparam.asString("roomId") ;
		var targetId = cparam.remain(0) ;
		if (!session.exists("/rooms/" + roomId + "/members/" + targetId)){
			source.sendMessage(
			rb.makeCommandBuilder("/commands/ban")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", targetId + ' not exists' ).build().talkMessage()) ;
			return ;
		} 
		
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + roomId + "/members/" + targetId).removeSelf() ;
		}) ;
	}, 
	
	this.info = function(source, cparam){
		var roomId = cparam.asString("roomId") ;
		
		var result = {} ;
		result.topic = session.pathBy("/rooms/" + cparam.asString("roomId")).property("title").asString() ;
		result.members = [] ;
		var children = session.pathBy("/rooms/" + cparam.asString("roomId") + "/members").children().iterator() ;
		while(children.hasNext()){
			result.members.push(children.next().fqn().name()) ;
		}
		
		source.sendMessage(
			rb.makeCommandBuilder("/commands/info")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("sender", "&lt;system&gt;")
				.property("message", toString(result)).build().talkMessage()) ;
	}, 
	
	
	this.topic = function(source, cparam){
		var topic = cparam.remains() ;
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + cparam.asString("roomId")).property("title", topic);
		}) ;
		
		source.sendMessage(
			rb.makeCommandBuilder("/commands/topic")
			  .inner("result")
				.property("clientScript", "client.room().message(args.message);")
				.property("message", 'topic[' + topic + ']' + ' changed').build().talkMessage()) ;
		
	} 
	
	
} ;