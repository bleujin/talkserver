<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta name = "viewport" content = "width=640;user-scalable=1">
	<title>Sample of Toontalk</title>
	
	<!-- Include these three JS files: -->
	<script type="text/javascript" src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
	<script type="text/javascript" src="http://www.jeasyui.com/easyui/jquery.easyui.min.js"></script>
	<script type="text/javascript" src="/toonweb/common_lang.js"></script>
	<script type="text/javascript" src="/toonweb/swfobject.js"></script>
	<script type="text/javascript" src="/toonweb/web_socket.js"></script>

	
</head>
<body onload="initChat();" leftmargin=0 topmargin=0>

<table border=0 cellpadding=0 cellspacing=0 width=640 background="/toonweb/img/body_bg_pattern.png">
	<tr><td height=166 background="/toonweb/img/top_bg.png"></td></tr>
	<tr><td height=425 style="background-image: url(/toonweb/img/body_logo.png) ; background-repeat:no-repeat; background-position:center center">
		<table width=600 align=center><tr><td><div id="outputDiv" style="overflow:scroll; width:600; height:380"></div></td></tr></table>
		
		
		</td></tr>
	<tr><td height=120 background="/toonweb/img/bottom_bg.png" align="center">
		<input type="text" id="message" style="width:95%; font-size:16px" /></td></tr>
</table>

<script type="text/javascript">

    WEB_SOCKET_SWF_LOCATION = "/toonweb/WebSocketMain.swf";  // Set URL of your WebSocketMain.swf here:
    WEB_SOCKET_DEBUG = true;  // Set this to dump debug message from Flash to console.log:

	var webClient = {
		
	} ;
	
	var client = new function(){
		var roomObj = new function(){
			this.prefixString = '' ;
			this.prefix = function(prefixString){
				this.prefixString = prefixString ;
			}, 
		
			this.message = function(message) {
				var log = document.getElementById("outputDiv");
		    	var escaped = message.replace(/&/, "&amp;").replace(/</, "&lt;").replace(/>/, "&gt;").replace(/"/, "&quot;"); // "
		    	if (this.prefixString == 'received') {
		    		log.innerHTML = "<div align='right' style=\"width:500; padding:7; background-color:dfdfdf \">" + escaped + "</div><br>" + log.innerHTML;
		    	} else if (this.prefixString == 'send') {
		    		log.innerHTML = "<div align='left' style=\"width:500; padding:7; background-color:efefef \">" + "Send : " + escaped + "</div><br>" + log.innerHTML;
		    	} else {
		    		log.innerHTML = "<div align='left' style=\"width:500; padding:7; background-color:efefef \">" + escaped + "</div><br>" + log.innerHTML;
		    	}
			}, 
			
			this.background = function(imgUrl){
				console.log(imgUrl) ;
			}, 
			
			this.invite = function(inviteMsg) {
				console.log(inviteMsg) ;
			}
		} ;

		var commonObj = new function(){
			
		} ; 
		
		var utilObj = new function(){
			this.alert = function(){
			}
		} ;
		
		
		
		this.room =  function(){
			return roomObj ;
		}, 
		
		this.character = function(id){
			return new function(){
				this.id = id ;
				
				this.scale = function(percentage) {
					console.log(this.id + ' ' + percentage) ;
				}
			} ;
		}, 
		
		this.common = function(){
			return commonObj ;
		}, 
		
		this.util = function(){
			return utilObj ;
		}, 
		
		this.gps = function(){
			return gpsObj ;
		}, 
		
		this.file = function(){
		}
	} ;
	
	
	// Everything below is the same as using standard WebSocket.
	function initChat(){

		webClient.sender = '$config.sender$' ;
		webClient.senderNickname = 'bleujin' ;
		webClient.roomId = '$config.roomId$' ;

		webClient.chat = function(){
			// id, script, params[
			var chatMsg = {id:'' + new Date().getUTCMilliseconds(), script:'/room/sendMessageWith', params:{}} ;
			var msgText = document.getElementById("message").value ;

			chatMsg.params.receivers = ''
			chatMsg.params.roomId = this.roomId ;
			chatMsg.params.message = msgText  ;
			chatMsg.params.sender = this.sender ;
			chatMsg.params.senderNickname = this.senderNickname ;
			chatMsg.params.clientScript = 'client.room().message(args.message);' ;
			chatMsg.params.requestId = '/123456' ;
			
			this.getWebSocket().send(this.jsonToString(chatMsg));
			document.getElementById("message").value = "";
			document.getElementById("message").focus();
		} ;


		webClient.close = function(){
        	this.getWebSocket().close();
		} ;

		
		webClient.jsonToString = function(obj){
			var t = typeof (obj);
		    if (t != "object" || obj === null) {
		        if (t == "string") obj = '"' + obj + '"'; // simple data type
		        return String(obj);
		    } else { // recurse array or object
		        var n, v, json = [], arr = (obj && obj.constructor == Array);
		        for (n in obj) {
		            v = obj[n]; t = typeof(v);
		            if (t == "string") v = '"'+v+'"';
		            else if (t == "object" && v !== null) v = this.jsonToString(v);
		            json.push((arr ? "" : '"' + n + '":') + String(v));
		        }
		        return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
		    }
		} ;
		
		
	  	webClient.command = function(script, params){
			// id, script, params[
			var cmdMsg = {} ;
			cmdMsg.id = new Date().getUTCMilliseconds() ;
			cmdMsg.script = script ;
			cmdMsg.params = params ;
			this.getWebSocket().send(this.jsonToString(cmdMsg));
		} ;


   		var ws = new WebSocket('$config.address$') ;
		
	  	ws.onopen = function(){
	  		client.room().message("open") ;
	  	} ;
	  	
   		ws.onmessage = function(e){
   			console.log(e.data) ;
   			if ('HEARTBEAT' == e.data) {
   				ws.send('HEARTBEAT') ;
   				return ;
   			}
   			// {notifyId:...}
   			var msg = eval('(' + e.data + ')') ;
   			if (msg.script == undefined && msg.notifyId != ''){
   				webClient.command('/room/listNotifyDataBy', {'notifyId':msg.notifyId, 'userId':webClient.sender}) ;
   				return ;
   			}
   			if (msg.status != 'success'){
   				console.error(e.data) ;
   				return ;
   			}
   			
   			if (msg.script.startWith('/commands/')){
   				client.room().message(msg.result) ;
   				return ;
   			}
   			
   			
   			if (msg.script == '/room/sendMessageWith') return ; // return sendMessageWith
   			if (msg.script == '/room/listNotifyDataBy') {
   				// alert(msg.result.message) ;
   				client.room().prefix((msg.result.sender == webClient.sender) ? 'send' : 'received') ;
   				var args = msg.result ;
   				eval(msg.result.clientScript) ;
   				return ;
   			}

   		} ;
   		
   		ws.onclose = function(){
   			client.room().message("closed") ;
   		} ;
   		ws.onerror = function(){
   			client.room().message("error") ;
   		} ;
   		
   		webClient.getWebSocket = function(){
   			return ws ;
   		} ;
	}


	jQuery("#message").keydown(function(event) {
		if (event.which == 13) {
	  		webClient.chat();			
		}

	});
	
</script>

</body>
</html>