new function(){

    var _myBotId = 'huebot' ;
    var serverHost = 'http://192.168.11.16/api/newdeveloper/lights/1/state';

    this.onLoad = function(){

    },

        this.onMessage = function(bm){

            if((!bm.message().equalsIgnoreCase('') && !bm.message().equalsIgnoreCase('불켜')) || session.exists("/bots/"+ bm.fromUserId())) return ;

            var roomId = bm.fromRoomId() ;
            var selfBotId = bm.toUserId() ;
            var time= new Date().getTime();
            var messageId=new net.ion.framework.util.ObjectId().toString();

            var messageBody = new net.ion.framework.parse.gson.JsonObject();
            var successMsg = '';

            if(bm.message().equalsIgnoreCase('불꺼')) {
                messageBody.put('on', false);
                successMsg = '불을 껐습니다';
            } else if(bm.message().equalsIgnoreCase('불켜')) {
                messageBody.put('on', true);
                successMsg = '불을 켰습니다';
            }

            var handler = new net.ion.talk.bot.connect.BotCompletionHandler() {
                onCompleted: function(jsonResponse) {
                     var response = jsonResponse.getAsJsonArray().get(0).getAsJsonObject();

                    session.tran(function(wsession) {
                        var messageNode = wsession.pathBy("/rooms/" + roomId + "/messages/" + messageId)
                            .property("message", response.has('success') ? successMsg : '제 상태가 좀 이상한가봐요')
                            .refTo("sender", "/users/"+selfBotId)
                            .property("roomId", roomId)
                            .property("options", "{event:'onMessage'}")
                            .property("clientScript", bm.clientScript())
                            .property("time",time.toString())
                            .property("messageId", messageId);

                    }) ;
                },

                onThrowable: function(ex){
                    ex.printStackTrace() ;
                }
            };

            java.lang.System.out.println(messageBody.toString());
            bc.putRequest(serverHost).setBody(messageBody.toString()).put(handler);
        },


        this.onWhisper = function(source, whisperMsg){
            source.sendMessage(
                rb.makeCommandBuilder("/whisper/baseball")
                    .inner("result")
                    .property("sender", "baseball")
                    .property("clientScript", "client.room().message(args);")
                    .property("message", whisperMsg.message())
                    .property("options", "{event:'onWhisper'}")
                    .property("messageId", new net.ion.framework.util.ObjectId().toString()).build().talkMessage()) ;
        },


        this.onEnter = function(bm){
            this.sendMessage("onEnter", bm, {message :"Hello " + bm.fromUserId() + " I'm EchoBot"}) ;
        },

        this.onExit = function(bm){

        },

        this.onFilter = function(bm){

        }
}
