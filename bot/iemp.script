new function(){
	
	var emps = '성   함	직 급	부   서	내선	핸드폰번호	E-mail \n\
박정진	수석연구원	플랫폼서비스개발팀	748	010-4221-1234	bleujin' ;

	var _myBotId = 'iemp' ;
	var empMap = {} ;
	var toString = function(obj) {
	    var str = '';
	    for (var p in obj) {
	        if (obj.hasOwnProperty(p)) {
	            str += p + '::' + obj[p] + '\n';
	        }
	    }
	    return str;
	} ;
	
	this.onLoad = function(){
		var reader = new net.ion.radon.util.csv.CsvReader(new java.io.StringReader(emps)) ;
		reader.setFieldDelimiter('\t');
		reader.setBlockDelimiter('\n');

		var line = reader.readLine() ; // skip
		while(true){
			line = reader.readLine() ;
			if (line == null || line.length == 0 || net.ion.framework.util.StringUtil.isBlank(line[0])) break ;
			var newEmp = {} ;
			newEmp.name = line[0].trim() ;
			newEmp.rule = line[1].trim() ;
			newEmp.dept = line[2].trim() ;
			newEmp.ino = line[3].trim() ;
			newEmp.mphone = line[4].trim() ;
			newEmp.email = line[5].trim() ;
			newEmp.action = '' ;
			empMap[newEmp.email + '@i-on.net'] = newEmp ;
		}

	}, 	

	this.onMessage = function(bm){
		if (session.exists("/bots/"+ bm.fromUserId())) return ;
		var found = [] ;
		var forfind = bm.message() ;
		for(var key in empMap){
			var emp = empMap[key] ;
			var fvalue = (forfind.equals(emp.email) ? 60 : 0) +
				(forfind.equals(emp.name) ? 50 : 0) +
				(forfind.equals(emp.rule) ? 10 : 0) +
				(forfind.equals(emp.dept) ? 10 : 0) +
				(forfind.equals(emp.ino) ? 5 : 0) +
				(forfind.equals(emp.mphone) ? 40 : 0) +
				(emp.email.indexOf(forfind) >= 0 ? forfind.length() * 3 : 0) +
				(emp.name.indexOf(forfind) >= 0 ? forfind.length() * 3 : 0) +
				(emp.rule.indexOf(forfind) >= 0 ? forfind.length() * 1 : 0) +
				(emp.dept.indexOf(forfind) >= 0 ? forfind.length() * 1 : 0) +
				(emp.mphone.indexOf(forfind) >= 0 ? forfind.length() * 2 : 0) ;
				 
			if (fvalue > 0) found.push({'fvalue':fvalue, 'emp':emp}) ; 
		}
		if (found.length < 1) return ;
		
		found.sort(function(left, right){return left.fvalue - right.fvalue ;}) ;
		
		var makeMessage = '<ol>' ;
		for(var i in found){
			var femp = found[i] ;
			makeMessage += '<li>' + femp.emp.name + ',' + femp.emp.mphone + ',' + femp.emp.email + ',' + femp.emp.action + '</li>' ;
		}
		makeMessage += '</ol>'
		
		var roomId = bm.fromRoomId() ;
		var selfBotId = bm.toUserId() ;
		var time= new Date().getTime();
		var messageId=new net.ion.framework.util.ObjectId().toString();
		
        session.tran(function(wsession) {
            var messageNode = wsession.pathBy("/rooms/" + roomId + "/messages/" + messageId)
                    .property("message", makeMessage)
                    .refTo("sender", "/users/"+_myBotId)
                    .property("roomId", roomId)
                    .property("options", "{event:'onMessage'}")
                    .property("clientScript", bm.clientScript())
                    .property("time",time.toString())
                    .property("messageId", messageId);

        }) ;
	}, 
	
	
	this.onWhisper = function(source, whisperMsg){
	
		
		var cmd = whisperMsg.asCommand() ;
		if (this.hasOwnProperty(cmd.fnName())){
			var rtn = this[cmd.fnName()](whisperMsg, cmd, source) ;
			if (rtn && rtn.message){
				source.sendMessage(
				rb.makeCommandBuilder("/whisper/iemp/" + cmd.fnName())
				  .inner("result")
				  	.property("sender", "iemp")
					.property("clientScript", rtn.clientScript || "client.room().message(args);")
					.property("message", rtn.message)
					.property("options", "{event:'onWhisper'}")
					.property("messageId", new net.ion.framework.util.ObjectId().toString()).build().talkMessage()) ;
			}
		} else if (empMap[source.id()] != undefined) {

			empMap[source.id()].action = whisperMsg.message() ;
			
			source.sendMessage(
				rb.makeCommandBuilder("/whisper/iemp/" + cmd.fnName())
				  .inner("result")
				  	.property("sender", "iemp")
					.property("clientScript","client.room().message(args);")
					.property("message", 'setted status : ' + whisperMsg.message())
					.property("options", "{event:'onWhisper'}")
					.property("messageId", new net.ion.framework.util.ObjectId().toString()).build().talkMessage()) ;
		}
	}, 

	this.sendMessage = function(event, bm, args){

	}, 
	
	this.onEnter = function(bm){
	}, 
	
	this.onExit = function(bm){
	}, 
	
	this.onFilter = function(bm){
	}, 
	
	
	this.find = function(scriptMsg, cmd, source){
		var forfind = cmd.remain(0) ;
		var found = [] ;
		for(var key in empMap){
			var emp = empMap[key] ;
			var fvalue = (forfind.equals(emp.email) ? 60 : 0) +
				(forfind.equals(emp.name) ? 50 : 0) +
				(forfind.equals(emp.rule) ? 10 : 0) +
				(forfind.equals(emp.dept) ? 10 : 0) +
				(forfind.equals(emp.ino) ? 5 : 0) +
				(forfind.equals(emp.mphone) ? 40 : 0) +
				(emp.email.indexOf(forfind) >= 0 ? forfind.length() * 3 : 0) +
				(emp.name.indexOf(forfind) >= 0 ? forfind.length() * 3 : 0) +
				(emp.rule.indexOf(forfind) >= 0 ? forfind.length() * 1 : 0) +
				(emp.dept.indexOf(forfind) >= 0 ? forfind.length() * 1 : 0) +
				(emp.mphone.indexOf(forfind) >= 0 ? forfind.length() * 2 : 0) ;
				 
			if (fvalue > 0) found.push({'fvalue':fvalue, 'emp':emp}) ; 
		}
		
		found.sort(function(left, right){return left.fvalue - right.fvalue ;}) ;
		
		var makeMessage = '<ol>' ;
		for(var i in found){
			var femp = found[i] ;
			makeMessage += '<br>' + femp.emp.name + ',' + femp.emp.mphone + ',' + femp.emp.email + ',' + femp.emp.action + '</br>' ;
		}
		makeMessage += '</ol>'
		
		return {'message':makeMessage};
	}
	

}
