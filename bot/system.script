new function(){
	var toString = function(obj) {
	    var str = '';
	    for (var p in obj) {
	        if (obj.hasOwnProperty(p)) {
	            str += p + '::' + obj[p] + '\n';
	        }
	    }
	    return str;
	} ;
	
	
	this.onLoad = function(){
		session.tran(function(wsession){
			wsession.pathBy("/users/system").property("userId", "system").property("nickname", "system bot").property("stateMessage", "normal").property("free", true) ;
			wsession.pathBy("/rooms/@system/members/system").refTo("user", "/users/system") ;
		}) ;
	}, 
	
	this.sendWhisper = function(bm, args){
		session.tran(function(wsession) {
        	wsession.pathBy("/rooms/@" + bm.sender() + "/messages/" + bm.newMsgId())
                    .property("message", args.message)
                    .refTo("sender", "/users/system")
                    .property("options", "{event:'onMessage'}")
                    .property("clientScript", args.clientScript || 'client.room().message(args)')
                    .property("messageId", bm.messageId());
        }) ;
	}, 

	this.sendToFromRoom = function(bm, args){
		session.tran(function(wsession) {
        	wsession.pathBy("/rooms/" + bm.asString("fromRoomId") + "/messages/" + bm.newMsgId())
                    .property("message", args.message)
                    .refTo("sender", bm.sender())
                    .property("options", "{event:'onMessage'}")
                    .property("clientScript", args.clientScript || 'client.room().message(args)')
                    .property("messageId", bm.messageId());
        }) ;
	}, 
	
	this.onMessage = function(bm){
//		this.sendWhisper(bm, {message:new java.util.Date().toString()}) ;
		var cmd = bm.asCommand() ;
		if (this.hasOwnProperty(cmd.fnName())){
			this[cmd.fnName()](bm, cmd) ;
		}
		
	}, 
	
	this.onEnter = function(bm){
	}, 
	
	this.onExit = function(params){
	}, 
	
	this.onFilter = function(params){

	}, 
	
	
	
	
	
	
		
	this.time = function(bm){
		this.sendWhisper(bm, {message:new java.util.Date().toString() }) ;
	}, 
	
	this.whoami = function(bm, cparam){
		var user = session.ghostBy("/users/" + bm.sender()) ;
		this.sendWhisper(bm, {message:"id:" + bm.sender() + ", nick:" + user.property("nickname").asString() }) ;
	}, 

	this.rooms = function(bm, cparam){
		// ex) list rooms, list friends, 
		var children = session.ghostBy("/openrooms").children().toList() ;
		var text = '' ;
		if (children.size() == 0) {
			text = 'no opened rooms' ; 
		} else {
			var rooms = children.iterator() ;
			text = '<ul>' ;
			while(rooms.hasNext()){
				var room = rooms.next().ref('room') ;
				var onClickMsg = "webClient.chat(\"/join " + room.property('roomId').asString() + "\")" ;
				text += "<li><a href='#' onclick='" + onClickMsg + "'>" + room.property('roomId').asString() + "</a> : " + room.property('title').asString() + "</li>" ;
			}
			text += '</ul>' ;
		}
		
		this.sendWhisper(bm, {message:text}) ;
	}, 
	
	this.join = function(bm, cparam){
		var roomId = cparam.remain(0) ;

		session.tranSync(function(wsession){
			wsession.pathBy("/openrooms/" + roomId).refTo("room", "/rooms/" + roomId).property("roomId", roomId) ;
			if (! wsession.exists("/rooms/" + roomId)) wsession.pathBy("/rooms/" + roomId).property("roomId", roomId).property("title", "not defined").child('members').child(bm.sender()) ;
			else wsession.pathBy("/rooms/" + roomId).property("roomId", roomId).child('members').child(bm.sender()) ;
		}) ;

		this.sendWhisper(bm, {clientScript:"client.room().join('" + roomId + "');", message:''}) ;

		/*
		var unreadMsg = session.pathBy("/rooms/" + roomId + "/messages").children().ascending('messageId').offset(100).iterator() ;
		while(unreadMsg.hasNext()){
			var next = unreadMsg.next() ; 
			source.sendMessage(rb.makeCommandBuilder("/commands/join")
			  .inner("result")
				.property(next, "message, sender.userId as sender, sender.nickname as senderNickname, requestId, clientScript, event, messageId, time")
				.property("roomId", roomId)
				.build().talkMessage()) ;			
		}
		*/
	}, 
	
	
	
	this.members = function(bm, cparam){
		if (bm.isNotInRoom() ||  bm.asString("fromRoomId") == 'Home') {
			this.sendWhisper(bm, {message:'this command can do executed only in room'}) ;
			return;
		}
	
		var result = [] ;
		var children = session.pathBy("/rooms/" + bm.asString("fromRoomId") + "/members").children().iterator() ;
		while(children.hasNext()){
			result.push(children.next().fqn().name()) ;
		}
		this.sendWhisper(bm, {message:result.join(', ')}) ;
	}, 
	
	
	this.info = function(bm, cparam){
		if (bm.isNotInRoom() ||  bm.asString("fromRoomId") == 'Home') {
			this.sendWhisper(bm, {message:'this command can do executed only in room'}) ;
			return;
		}

		var result = {} ;
		result.topic = session.pathBy("/rooms/" + bm.asString("fromRoomId")).property("title").asString() ;
		result.members = [] ;
		var children = session.pathBy("/rooms/" + bm.asString("fromRoomId") + "/members").children().iterator() ;
		while(children.hasNext()){
			result.members.push(children.next().fqn().name()) ;
		}

		this.sendWhisper(bm, {message:toString(result)}) ;
	}, 
	
	this.bot = function(bm, cparam){
		if (bm.isNotInRoom() ||  bm.asString("fromRoomId") == 'Home') {
			this.sendWhisper(bm, {message:'this command can do executed only in room'}) ;
			return;
		}
	
		var botId = cparam.remain(0) ;
		if (!session.exists("/bots/" + botId)){
			this.sendWhisper(bm, {message: '[botId:' + botId + '] not exists'}) ;
			return ;
		} 
		
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + bm.asString("fromRoomId") + "/members/" + botId) ;
		}) ;
		this.sendWhisper(bm, {message: '[botId:' + botId + '] invited'}) ;
	}, 
	
	
	this.ban = function(bm, cparam){
		if (bm.isNotInRoom() ||  bm.asString("fromRoomId") == 'Home') {
			this.sendWhisper(bm, {message:'this command can do executed only in room'}) ;
			return;
		}

		var roomId = bm.asString("fromRoomId") ;
		var targetId = cparam.remain(0) ;
		if (!session.exists("/rooms/" + roomId + "/members/" + targetId)){
			this.sendWhisper(bm, {message:targetId + ' not exists'}) ;
			return ;
		} 
		
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + roomId + "/members/" + targetId).removeSelf() ;
		}) ;
	}, 
	
	this.leave = function(bm, cparam){
		if (bm.isNotInRoom() ||  bm.asString("fromRoomId") == 'Home') {
			this.sendWhisper(bm, {message:'this command can do executed only in room'}) ;
			return;
		}

		var roomId = bm.asString("fromRoomId") ;
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + roomId + "/members/" + bm.senderId()).removeSelf() ;
		}) ;
		
		this.sendWhisper(bm, {clientScript:"client.room().leave('" + roomId + "');", message:''}) ;
		
	}, 
	
	
	this.topic = function(bm, cparam){
		if (bm.isNotInRoom() ||  bm.asString("fromRoomId") == 'Home') {
			this.sendWhisper(bm, {message:'this command can do executed only in room'}) ;
			return;
		}

		var topic = cparam.remains() ;
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + bm.asString("fromRoomId")).property("title", topic);
		}) ;
		this.sendToFromRoom(bm, {message:'topic[' + topic + ']' + ' changed'}) ;
	},  
	
	
	this.invite = function(bm, cparam){
		if (bm.isNotInRoom() ||  bm.asString("fromRoomId") == 'Home') {
			this.sendWhisper(bm, {message:'this command can do executed only in room'}) ;
			return;
		}
	
		var targetId = cparam.remain(0) ;
		if (!session.exists("/users/" + targetId)){
			this.sendWhisper(bm, {message: '[userId:' + targetId + '] not exists'}) ;
			return ;
		} 
		
		if(session.pathBy("/users/" + targetId).property("free").asBoolean()) {
			session.tranSync(function(wsession){
				wsession.pathBy("/rooms/" + bm.asString("fromRoomId") + "/members/" + targetId) ;
			}) ;
		}
		
		this.sendWhisper(bm, {message: '[userId:' + targetId + '] invite'}) ;
	}, 
	
	
	
	
	this.whisper = function(bm, cparam){
		var targetId = cparam.reamin(0) ;
		
	}, 


	this.create = function(bm, cparam){
		var roomId = new net.ion.framework.util.ObjectId().toString() ;
		session.tran(function(wsession){
			var members = wsession.pathBy("/openrooms/" + roomId).child("members") ;
			members.child(client.userId()) ;
			members.child(cparam.remain(0)) ;
		}) ;
		client.data("roomId", roomId) ;
	}
	
	
} ;