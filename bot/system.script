new function(){
	var toString = function(obj) {
	    var str = '';
	    for (var p in obj) {
	        if (obj.hasOwnProperty(p)) {
	            str += p + '::' + obj[p] + '\n';
	        }
	    }
	    return str;
	} ;
	
	
	this.onLoad = function(){
		session.tran(function(wsession){
			wsession.pathBy("/users/system").property("userId", "system").property("nickname", "system bot").property("stateMessage", "normal").property("free", true) ;
			wsession.pathBy("/rooms/@system/members/system").refTo("user", "/users/system") ;
		}) ;
	}, 
	
	this.sendWhisper = function(bm, args){
		session.tran(function(wsession) {
        	wsession.pathBy("/rooms/@" + bm.fromUserId() + "/messages/" + new net.ion.framework.util.ObjectId())
                    .property("message", args.message)
                    .refTo("sender", "/users/system")
                    .property("options", "{event:'onMessage'}")
                    .property("clientScript", args.clientScript || 'client.room().message(args)')
                    .property("messageId", bm.messageId());
        }) ;
	}, 

	this.sendToFromRoom = function(bm, args){
		session.tran(function(wsession) {
			var newMsgId = new net.ion.framework.util.ObjectId().toString() ;
        	wsession.pathBy("/rooms/" + bm.roomId() + "/messages/" + newMsgId)
                    .property("message", args.message)
                    .refTo("sender", "/users/system")
                    .property("options", "{event:'onMessage'}")
                    .property("clientScript", args.clientScript || 'client.room().message(args)')
                    .property("messageId", newMsgId);
        }) ;
	}, 
	
	this.onMessage = function(bm){
	
		// this.sendWhisper(bm, {message:new java.util.Date().toString()}) ;
		var cmd = bm.asCommand() ;
		if (this.hasOwnProperty(cmd.fnName())){
			var rtn = this[cmd.fnName()](bm, cmd) ;
			// java.lang.System.out.println(bm.roomId() + rtn.message + bm.fromUserId()) ;
			this.sendToFromRoom(bm, rtn) ;
		}
	}, 
	
	this.onWhisper = function(source, whisperMsg){
		var cmd = whisperMsg.asCommand() ;
		if (this.hasOwnProperty(cmd.fnName())){
			var rtn = this[cmd.fnName()](whisperMsg, cmd, source) ;
			if (rtn && rtn.message){
				source.sendMessage(
				rb.makeCommandBuilder("/whisper/system/" + cmd.fnName())
				  .inner("result")
				  	.property("sender", "system")
					.property("clientScript", rtn.clientScript || "client.room().message(args);")
					.property("message", rtn.message)
					.property("options", "{event:'onWhisper'}")
					.property("messageId", new net.ion.framework.util.ObjectId().toString()).build().talkMessage()) ;
			}				
		} else {
			source.sendMessage(
				rb.makeCommandBuilder("/whisper/system/" + cmd.fnName())
				  .inner("result")
				  	.property("sender", "system")
					.property("clientScript", "client.room().message(args);")
					.property("message", 'unknown command : ' + cmd.fnName())
					.property("options", "{event:'onWhisper'}")
					.property("messageId", new net.ion.framework.util.ObjectId().toString()).build().talkMessage()) ;
			
		}
		
	
	}, 
	
	this.onEnter = function(bm){
	}, 
	
	this.onExit = function(params){
	}, 
	
	this.onFilter = function(params){

	}, 
	
	
	
	
	this.time = function(whisperMsg){
		return {message:new java.util.Date().toString() } ;
	}, 
	
	this.whoami = function(whisperMsg, cparam){
		var user = session.ghostBy("/users/" + whisperMsg.fromUserId()) ;
		return {message:"id:" + whisperMsg.fromUserId() + ", nick:" + user.property("nickname").asString() } ;
	}, 

	this.join = function(whisperMsg, cparam, source){
		var roomId = cparam.remain(0) ;

		session.tranSync(function(wsession){
			wsession.pathBy("/openrooms/" + roomId).refTo("room", "/rooms/" + roomId).property("roomId", roomId) ;
			if (! wsession.exists("/rooms/" + roomId)) wsession.pathBy("/rooms/" + roomId).property("roomId", roomId).property("title", "no title").child('members').child(whisperMsg.fromUserId()) ;
			else wsession.pathBy("/rooms/" + roomId).property("roomId", roomId).child('members').child(whisperMsg.fromUserId()) ;
		}) ;

		source.sendMessage(
		rb.makeCommandBuilder("/whisper/system/" + cparam.fnName())
		  .inner("result")
		  	.property("sender", "system")
			.property("clientScript", "client.room().join(args);")
			.property("message", "")
			.property("roomId", roomId)
			.property("options", "{event:'onWhisper'}")
			.property("messageId", new net.ion.framework.util.ObjectId().toString()).build().talkMessage()) ;

		var unreadMsg = session.pathBy("/rooms/" + roomId + "/messages").children().ascending('messageId').offset(100).iterator() ;
		while(unreadMsg.hasNext()){
			var next = unreadMsg.next() ; 
			if (next.property("exclusiveSender").asBoolean() && whisperMsg.fromUserId().equals(next.ref("sender").property("userId").asString()) ) continue ;
			source.sendMessage(rb.makeCommandBuilder("/whisper/system")
			  .inner("result")
				.property(next, "message, sender.userId as sender, sender.nickname as senderNickname, requestId, clientScript, options, messageId, time")
				.property("roomId", roomId)
				.build().talkMessage()) ;			
		}
		
		return ;
	}, 
	
	
	this.rooms = function(whisperMsg, cparam){
		// ex) list rooms, list friends, 
		var children = session.ghostBy("/openrooms").children().toList() ;
		var text = '' ;
		if (children.size() == 0) {
			text = 'no opened rooms' ; 
		} else {
			var rooms = children.iterator() ;
			text = '<ul>' ;
			while(rooms.hasNext()){
				var room = rooms.next().ref('room') ;
				var onClickMsg = "webClient.chat(\"/join " + room.property('roomId').asString() + "\")" ;
				text += "<li><a href='#' onclick='" + onClickMsg + "'>" + room.property('roomId').asString() + "</a> : " + room.property('title').asString() + "</li>" ;
			}
			text += '</ul>' ;
		}
		
		return {message:text} ;
	}, 
	
	
	this.members = function(whisperMsg, cparam){
		if (whisperMsg.isNotInRoom()) {
			return {message:'this command can do executed only in room'} ;
		}
	
		var result = [] ;
		var citer = session.ghostBy("/rooms/" + whisperMsg.fromRoomId() + "/members").children().iterator() ;
		while(citer.hasNext()){
			result.push(citer.next().fqn().name()) ;
		}
		return {message:result.join(', ')} ;
	}, 
	
	
	this.info = function(whisperMsg, cparam){
		if (whisperMsg.isNotInRoom()) {
			return {message:'this command can do executed only in room'} ;
		}

		var result = {} ;
		result.topic = session.pathBy("/rooms/" + whisperMsg.fromRoomId()).property("title").defaultValue('no topic') ;
		result.members = [] ;
		var children = session.pathBy("/rooms/" + whisperMsg.fromRoomId() + "/members").children().iterator() ;
		while(children.hasNext()){
			result.members.push(children.next().fqn().name()) ;
		}

		return {message:toString(result)} ;
	}, 
	
	this.bot = function(whisperMsg, cparam){
		if (whisperMsg.isNotInRoom()) {
			return {message:'this command can do executed only in room'} ;
		}
	
		var botId = cparam.remain(0) ;
		if (!session.exists("/bots/" + botId)){
			return {message: '[botId:' + botId + '] not exists'} ;
		} 
		
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + whisperMsg.fromRoomId() + "/members/" + botId) ;
		}) ;
		return {message: '[botId:' + botId + '] invited'} ;
	}, 
	
	
	this.ban = function(whisperMsg, cparam){
		if (whisperMsg.isNotInRoom()) {
			return {message:'this command can do executed only in room'} ;
		}

		var roomId = whisperMsg.fromRoomId() ;
		var targetId = cparam.remain(0) ;
		if (!session.exists("/rooms/" + roomId + "/members/" + targetId)){
			return {message:targetId + ' not exists'} ;
		} 
		
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + roomId + "/members/" + targetId).removeSelf() ;
		}) ;
		return {message: targetId + ' ban from' + whisperMsg.fromUserId()} ;
	}, 
	
	this.leave = function(whisperMsg, cparam, source){
		if (whisperMsg.isNotInRoom()) {
			return {message:'this command can do executed only in room'} ;
		}

		var roomId = whisperMsg.fromRoomId() ;
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + roomId + "/members/" + whisperMsg.fromUserId()).removeSelf() ;
		}) ;
		
		return {clientScript:"client.room().leave(args);", message:'leaved room', 'roomId':roomId} ;
	}, 
	
	
	this.topic = function(whisperMsg, cparam){
		if (whisperMsg.isNotInRoom()) {
			return {message:'this command can do executed only in room'} ;
		}

		var topic = cparam.remains() ;
		session.tranSync(function(wsession){
			wsession.pathBy("/rooms/" + whisperMsg.fromRoomId()).property("title", topic);
		}) ;
		return {message:'topic[' + topic + ']' + ' changed'} ;
	},  
	
	
	this.invite = function(whisperMsg, cparam){
		if (whisperMsg.isNotInRoom()) {
			return {message:'this command can do executed only in room'} ;
		}
	
		var targetId = cparam.remain(0) ;
		if (!session.exists("/users/" + targetId)){
			return {message: '[userId:' + targetId + '] not exists'} ;
		} 
		
		if(session.pathBy("/users/" + targetId).property("free").asBoolean() == true) { // in javascript why not affectd false ?
			session.tranSync(function(wsession){
				wsession.pathBy("/rooms/" + whisperMsg.fromRoomId() + "/members/" + targetId) ;
			}) ;
			
			return {message: '[userId:' + targetId + '] invite'} ;
		} else {
			var sender = whisperMsg.fromUserId() ;
			session.tranSync(function(wsession){
				wsession.pathBy("/rooms/@" + targetId + "/messages/" + new net.ion.framework.util.ObjectId().toString())
					.property("message", sender + ' invite you')
                    .refTo("sender", "/users/" + sender)
                    .property("fromRoomId", whisperMsg.fromRoomId())
                    .property("options", "{event:'onWhisper'}")
                    .property("clientScript", 'client.room().message(args)')
                    .property("messageId", whisperMsg.messageId());
			}) ;
			
			return {message: '[userId:' + targetId + '] invite-message received'} ;
		}
		
	}, 
	
	
	this.whisper = function(whisperMsg, cparam, source){
		var sender = whisperMsg.fromUserId() ;
		if ("" == cparam.remain(0)){
			var lastMsgId = session.ghostBy("/rooms/@" + sender + "/messages").property("last").asString();
			
			var unreadMsg = session.ghostBy("/rooms/@" + sender + "/messages").children().ascending('messageId').gt('messageId', lastMsgId).iterator() ;
			while(unreadMsg.hasNext()){
				var next = unreadMsg.next() ; 
				source.sendMessage(rb.makeCommandBuilder("/whisper/system/" + cparam.fnName())
			  		.inner("result")
						.property(next, "message, sender.userId as sender, sender.nickname as senderNickname, requestId, clientScript, options, messageId, time")
						.build().talkMessage()) ;
			}	
			return ;
			
		} else if ("read" == cparam.remain(0)){
			session.tran(function(wsession){
				var firstNode = wsession.pathBy("/rooms/@" + sender + "/messages").children().descending("messageId").firstNode() ;
				if (firstNode){
					wsession.pathBy("/rooms/@" + sender + "/messages").property("last", firstNode.property("messageId").asString()) ;
				}
			}) ;
		
			source.sendMessage(
				rb.makeCommandBuilder("/whisper/system/" + cparam.fnName())
				  .inner("result")
				  	.property("sender", "system")
					.property("clientScript", "client.room().message(args);")
					.property("message", "all whisper trans 'to read' status")
					.property("options", "{event:'onWhisper'}")
					.property("messageId", new net.ion.framework.util.ObjectId().toString()).build().talkMessage()) ;
			return ;
		} else {
			var offset = cparam.remainAsInt(0, 10) ;
			var skip = cparam.remainAsInt(1, 0) ;
		
			var unreadMsg = session.ghostBy("/rooms/@" + sender + "/messages").children().ascending('messageId').skip(skip).offset(offset).toList().iterator() ;
			while(unreadMsg.hasNext()){
				var next = unreadMsg.next() ; 
				source.sendMessage(rb.makeCommandBuilder("/whisper/system/" + cparam.fnName())
			  		.inner("result")
						.property(next, "message, sender.userId as sender, sender.nickname as senderNickname, requestId, clientScript, options, messageId, time")
						.build().talkMessage()) ;
			}	
			return ;
		}
	
	} 


	
} ;